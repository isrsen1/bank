//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Login
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Drawing;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.Windows.Forms;

    public partial class Kredit_
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Kredit_()
        {
            this.Otplatna_tablica = new HashSet<Otplatna_tablica>();
        }
    
        public int Id { get; set; }
        public int Status { get; set; }
        public Nullable<System.DateTime> DatumPocetka { get; set; }
        public double Glavnica { get; set; }
        public int RokOtplate { get; set; }
        public Nullable<int> Zaposlenik_id { get; set; }
        public Nullable<int> Klijent_id { get; set; }
        public double KamatnaStopa { get; set; }
        public string NazivKredita { get; set; }

        public List<Otplatna_tablica> KolekcijaZapisa = new List<Otplatna_tablica>();

        public virtual Klijent Klijent { get; set; }
        public virtual Zaposlenik Zaposlenik { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Otplatna_tablica> Otplatna_tablica { get; set; }

        //metoda za dohvaćanje svih kredita iz baze podataka
        public BindingList<Kredit_> DohvatiKredite() {
            BindingList<Kredit_> lista = null;
            using (BankaEntities db= new BankaEntities()) {
                lista = new BindingList<Kredit_>(db.Kredit_.SqlQuery("Select *from Kredit_ where status=1").ToList());
            }
            return lista;
        }

        //Metoda za dohvaćanje kredita za oadbranog korisnika
        public BindingList<Kredit_> DohvatiKrediteKorisnika(Klijent klijent)
        {

            BindingList<Kredit_> lista = null;
            using (var db = new BankaEntities())
            {
                db.Klijents.Attach(klijent);
                lista = new BindingList<Kredit_>(db.Kredit_.SqlQuery("Select *from Kredit_ where Status=1 and Klijent_id='" + klijent.Id + "'").ToList());
            }
            return lista;
        }

        //dodavanje jednog mjeseca otplatne tablice u listu otplatne tablice
        public void DodajZapisUOtplatnu(Otplatna_tablica otplata) {
            KolekcijaZapisa.Add(otplata);
        }

        //metoda za izračunavanje rekurzivne kamatne stope odabranog kredita
        public double IzracunajRekurzivnuKamatnuStopu() {
            double p = this.KamatnaStopa / 12;
            double pom = 1 + (p / 100);
            return pom;
        }

        //metoda za izracunavanje anuiteta kredita, kao parametar prima rekurzvnu kamatnu stopu
        public double IzracunajAnuitet(double r) {
            double gornjiDio = 0;
            double donjiDio = 0;
            gornjiDio = Math.Pow(r,RokOtplate)*(r-1);
            donjiDio = Math.Pow(r,this.RokOtplate)-1;
            double anuitet = Glavnica * (gornjiDio / donjiDio);
            return Math.Round(anuitet,2);
        }
        //metoda za izracunavanje kamate razdoblja odaranog kredita, kao parametar prima ostatak duga kredita i rekurzivnu kamatnu stopu
        public double IzracunajKamatuRazdoblja(double ostatakDuga,double r) {
            return Math.Round(ostatakDuga*(r-1),2);
        }
        //metoda za izračunavanje otplatne kvote kredita,kao parametre prima anuitet i kamatu razdoblja
        public double IzracunajOtplatnuKvotu(double anuitet,double kamataRazdoblja) {
            return Math.Round(anuitet-kamataRazdoblja,3);
        }
        // metoda za izračunavanje otplaćenog djela duga
        public double IzracunajOtplaceniDioDuga(double dio,double kvota) {
            return Math.Round(dio+kvota,2);
        }
        //metoda za izracunavanje ostatka duga za traženi kredit
        public double IzracunajOstatakDUga(double ostatak,double kvota) {
            double ostatakDuga = Math.Round(ostatak-kvota,2);
            return ostatakDuga;
        }
    }
}
